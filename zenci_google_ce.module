<?php
/**
 * @file
 * Prepare testing environment on Google Compute Engine.
 * Spin Up VPS to process tests and destroy after.
 */

 define('ZENCI_GOOGLE_CE_TOKEN_RENEWAL', 600);

/**
 * Implements hook_config_info().
 */
function zenci_google_ce_config_info() {
  $prefixes['zenci_google_ce.settings'] = array(
    'label' => t('ZenCI GoogleComputeEngine API settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 */
function zenci_google_ce_permission() {
  return array(
    'test job view' => array(
      'title' => t('Access job results'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function zenci_google_ce_menu() {
  $items = array();

  $items['admin/config/system/google_ce'] = array(
    'title' => 'GoogleComputeEngine settings',
    'description' => 'GoogleComputeEngine settings.',
    'page callback' => 'zenci_google_ce_templates',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_google_ce.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/google_ce/list'] = array(
    'title' => 'GoogleComputeEngine Templates',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Admin settings page.
  $items['admin/config/system/google_ce/settings'] = array(
    'title' => 'GoogleComputeEngine settings',
    'description' => 'GoogleComputeEngine settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_google_ce_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_google_ce.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/system/google_ce/template_add'] = array(
    'title' => 'Add template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_google_ce_template', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_google_ce.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/google_ce/instance_add'] = array(
    'title' => 'Add instance',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_google_ce_instance', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_google_ce.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/google_ce/instance_del'] = array(
    'title' => 'Delete instance',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_google_ce_instance_del', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_google_ce.admin.inc',
    'type' => MENU_CALLBACK,
  );


  $items['admin/config/system/google_ce/%/delete'] = array(
    'title' => 'Remove template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('zenci_google_ce_template_remove', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'zenci_google_ce.admin.inc',
    'type' => MENU_CALLBACK,
  );


  $items['zenci_joblist'] = array(
    'title' => 'ZenCI tests results',
    'description' => 'View result of tests.',
    'page callback' => 'zenci_google_ce_job_list',
    'access callback' => 'user_access',
    'access arguments' => array('test job view'),
    'file' => 'zenci_google_ce.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_zenci_webhook().
 */
function zenci_google_ce_zenci_webhook($method, $data) {
  switch ($method) {
    case 'config':
      /** ZenCI config reguest from ZenCI server.
       *
       * @param $data array
       *   - owner: GitHub organisation or user.
       *   - repo: GitHub repository name.
       *   - branch: repository branch that is going to be deployed.
       *
       * @return
       *   array with 'config' value where gitlc.yml file is base64 encoded.
       */

      // Create VPS and pass back deploy and testing structure.

      $config_filepath = backdrop_get_path('module', 'zenci_google_ce') . '/gitlc.yml';

      if ($config = file_get_contents($config_filepath)) {
        return array(
          'config' => base64_encode($config),
        );
      }
      break;
    case 'google_ce_before':
      /** ZenCI before test request from ZenCI server.
       *
       * @param $data array
       *   - config: current config structure. Usefull if provided by .gitlc.yml file in GitHub Repository.
       *     - env_vars: Enviorment values set by script or Gitlc.
       *   - repo_name: GitHub repository name.
       *   - repo_owner: GitHub repository owner.
       *   - branch: repository branch that is going to be deployed.
       *   - pull_request: PR number or FALSE.
       *   - action: create,push,opened,synchronize.
       *   - test: test name.
       *
       * @return
       *   array with 'env_vars'. All enviotment variables will be available via ENV in scripts.
       */

       switch($data['action']){
         case 'create':
         case 'push':
         case 'opened':
         case 'reopened':
         case 'synchronize':
           // create VPS
           $name = zenci_instance_build_name($data);
           $instance = zenci_google_ce_create_instance($name, $data['test']);
           sleep(15); // Extra 15 sec to allow SSH start up.

           $answer = array();
           $answer['server'] = $instance['ip'];
           return $answer;
         break;
       }
      break;
    case 'google_ce_after':
      /** ZenCI before test request from ZenCI server.
       *
       * @param $data array
       *   - config: current config structure. Usefull if provided by .gitlc.yml file in GitHub Repository.
       *     - env_vars: Enviorment values set by script or Gitlc.
       *   - repo_name: GitHub repository name.
       *   - repo_owner: GitHub repository owner.
       *   - branch: repository branch that is going to be deployed.
       *   - pull_request: PR number or FALSE.
       *   - action: create,push,.
       *
       * @return
       *   array with 'env_vars'. All enviotment variables will be available via ENV in scripts.
       */

       switch($data['action']){
         case 'create':
         case 'push':
         case 'opened':
         case 'reopened':
         case 'synchronize':
           // destroy VPS
           $name = zenci_instance_build_name($data);
           $instance = db_select('zenci_google_ce_instances', 'gh')
              ->fields('gh')
              ->condition('name', $name)
              ->execute()
              ->fetchObject();
            if($instance){
              zenci_google_ce_delete_instance($instance);
            }


         break;
       }
      break;

  }
  return $data;
}

/**
 * Get initilisated class object of GoogleComputeEngineAPI.
 *
 * @param $data array
 *
 * @return string
 *   Return valid name for instance and disk.
 *   Values must match the following regular expression: '[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?'" }
 *
 */
function zenci_instance_build_name($data){
  $name = '';
  if($data['pull_request']){
    $name .= 'pr-' . $data['pull_request'] . "-";
  }
  $name .= $data['branch'] . "-" . $data['repo_name'] . "-" . $data['repo_owner'];

  if(strlen($name) > 15){
    $name = substr($name, 0, 15);
  }

  if(isset($data['sha'])){
   $name .= "-" . substr($data['sha'], 0, 6);
  }

  $name = strtolower($name);
  $name = preg_replace('~[^-a-z0-9]+~', '', $name);

  if(strlen($name) > 60){
    $name = substr($name, 0, 60);
  }
  if(is_numeric($name[0])){
    $name = 'z' . $name;
  }
  return $name;
}

/**
 * Get initilisated class object of GoogleComputeEngineAPI.
 *
 * @return
 *   Return GoogleComputeEngineAPI object.
 *
 */
function zenci_google_ce_get_class() {
  module_load_include('inc', 'zenci_google_ce', 'zenci_google_ce.class');

  $private_key = zenci_google_ce_get_private_key();
  $project_id = zenci_google_ce_get_project_id();

  $GoogleComputeEngineAPI = new GoogleComputeEngineAPI();

  $private_key = zenci_google_ce_get_private_key();
  $project_id = zenci_google_ce_get_project_id();
  $ssh_public_key = zenci_google_ce_get_ssh_public_key();

  $GoogleComputeEngineAPI->setProjectID($project_id);
  $GoogleComputeEngineAPI->setPrivateKey($private_key);
  $GoogleComputeEngineAPI->setSSHPublicKey($ssh_public_key);

  $token = zenci_google_ce_get_token();

  $GoogleComputeEngineAPI->setSaveTokenFunction('zenci_google_ce_save_token');

  if(FALSE === $token){
    $token = $GoogleComputeEngineAPI->updateToken();
  }else{
    $GoogleComputeEngineAPI->setToken($token['token'], $token['expire']);
  }

  return $GoogleComputeEngineAPI;
}

/**
 * Store temporary token in config for future reuse.
 *
 * @param $token token
 * @param $expire token expire timestamp
 *
 */
function zenci_google_ce_save_token($token, $expire){
  $config = config('zenci_google_ce.settings');
  $config->set('token', $token);
  $config->set('token_expire', $expire);
  $config->save();
}

/**
 * Get temporary saved token.
 *
 * @return
 *   FALSE if expired.
 *
 */
function zenci_google_ce_get_token() {
  $config = config('zenci_google_ce.settings');

  $token = $config->get('token');
  if($token) {
    $token_expire = $config->get('token_expire');
    if($token_expire < time() + ZENCI_GOOGLE_CE_TOKEN_RENEWAL ) {
      return FALSE;
    }else{
      return array(
        'token' => $token,
        'expire' => $token_expire,
      );
    }
  }
  return FALSE;
}

/**
 * Get private key. Required to retrive new token
 *
 * @return
 *   Return private key.
 *
 */
function zenci_google_ce_get_private_key() {
  $config = config('zenci_google_ce.settings');

  $private_key = settings_get('zenci_google_ce_private_key');

  if (empty($private_key)) {
    $private_key = $config->get('private_key');
  }

  return $private_key;
}

/**
 * Get project id.
 *
 * @return
 *   Return project id.
 *
 */
function zenci_google_ce_get_project_id() {
  $config = config('zenci_google_ce.settings');

  $project_id = settings_get('zenci_google_ce_project_id');

  if (empty($project_id)) {
    $project_id = $config->get('project_id');
  }

  return $project_id;
}

/**
 * Get private key. Required to retrive new token
 *
 * @return
 *   Return private key.
 *
 */
function zenci_google_ce_get_ssh_public_key() {
  $config = config('zenci_google_ce.settings');

  $ssh_public_key = settings_get('zenci_google_ce_ssh_public_key');

  if (empty($ssh_public_key)) {
    $ssh_public_key = $config->get('ssh_public_key');
  }

  return $ssh_public_key;
}


/**
 * Create instance.
 *
 * @param $name instance name.
 *   Should be unique. 63 characters limit. Only numbers, low case letters and dash.
 * @param $template_name Saved template name.
 *
 * @return
 *   Return instance information or FALSE.
 *
 */
function zenci_google_ce_create_instance($name, $template_name){
  $template = db_select('zenci_google_ce_templates', 'gh')
    ->fields('gh')
    ->condition('name', $template_name)
    ->execute()
    ->fetchObject();

  watchdog('zenci_google_ce', ' Create instance !name !template_name', array('!name' => $name, '!template_name' => $template_name));

  $GoogleComputeEngineAPI = zenci_google_ce_get_class();

  $instance = $GoogleComputeEngineAPI->createInstance($name, $template);

  if($instance){
    $record = array(
      'name' => $name,
      'created' => time(), // Here we need to parse : [creationTimestamp] => 2016-05-13T11:49:54.890-07:00
      'owner' => 'owner', //repo owner.
      'repo' => 'repo', // repo name.
      'branch' => 'branch', //branch name.
      'pr' => 0, //pr number
      'template' => $template_name,
      'results' => 'some data here',
      'zone' => $instance['zone_name'],
      'ip' => $instance['ip_address']
    );
    if(FALSE !== backdrop_write_record('zenci_google_ce_instances', $record)){
      return $record;
    }
  } else {
    watchdog('zenci_google_ce', 'Create false : ' . print_r($GoogleComputeEngineAPI->testingGetHeaders(),true));
  }
  return FALSE;
}

/**
 * Delete instance.
 *
 * @param $instance - instance object from database.
 *
 * @return
 *   TRUE if success, FALSE if fail.
 *
 */
function zenci_google_ce_delete_instance($instance){
  watchdog('zenci_google_ce', ' Delete instance !name', array('!name' => $instance->name));

  $GoogleComputeEngineAPI = zenci_google_ce_get_class();

  $answer = $GoogleComputeEngineAPI->deleteInstance($instance->zone, $instance->name);
  if(is_array($answer) && isset($answer['status'])){
    db_delete('zenci_google_ce_instances')
    ->condition('id', $instance->id)
    ->execute();
    return TRUE;
  }
  return FALSE;
}
